{
1. 12.5. ????????? ????????? (5)

?? ??????? ?????????? ?????????? ????????? ? ??????? ??????????? ????? ????? ?????????? ????? ????????? ????? ?????????? ???????? ?????? ?????????.
2.Фомин Степан ПС-21
3. Dev+GNU Pascal 1.9.4.13
   Кодировка - 1251
4.INPUT - input.txt
  OUTPUT - output.txt
5.INPUT - ???? ?? ????? INPUT.TXT. ? ?????? ?????? ????????? ????? N (2 = N = 20) — ?????????? ?????????, ??????? ????? ?????????. ?? ?????? ?????? ????? ?????? ???????? N ????? ?? 1 ?? 1000; i-? ????? - ??? ????? ? ?????????????, ????????? ??? ?????????? i-?? ????????. ????? ???? N ?????, ??????????? ??????????? ????? ??????????. ? ?????? ?? ??? ????????? ?? N ???????? 'Y' ? 'N' (????????? ????????? ????). ?????? 'Y' ? i-? ?? ???? ????? ?? j-? ????? ????????, ??? ??? ??????? i-?? ???????? ????????? ????????? j-?. ?????? 'N' ????????, ??? i-? ??????? ?? ??????? ?? j-?? ????????.
  OUTPUT - ????? ? ???? OUTPUT.TXT.? ???????????? ?????? ??????? ??????????? ????? ? ?????????????, ????????? ??? ?????????? ???? ?????????, ??? –1, ???? ??? ???????? ??????? ???????????? ?????? ????????? ?????? ?????????.
}



PROGRAM Processes;
CONST 
  MaxKol=1000;
Type
  ArrayProc= array [1..MaxKol,0..2] of INTEGER;// время процесса, время начала процесса,время окончания процесса
  ArraySort= array [1..MaxKol] of INTEGER;// индекс
  MatrixProc= array [1..MaxKol,1..MaxKol] of INTEGER;//матрица смежности
Var
  Fin,Fout: Text;
  NameFile: STRING;
  Ch: CHAR;
  i, j, Kol, t, tProc, tProcMax: INTEGER;
  Processes:ArrayProc;
  Index:ArraySort;
  MatrixProcesses:MatrixProc;
  pos,Rez: INTEGER;
  
PROCEDURE Sort(i:integer; VAR Rez: INTEGER);
VAR j:INTEGER;
BEGIN
  IF Processes[i,1]=1   //-1 - не обработана, 1 - идет обработка,  2 - закончена обработка
  THEN
    Rez:=1;   //пометка зацикливания
  IF Processes[i,1]<>-1
  THEN
    EXIT;
    
  Processes[i,1]:=1;

  FOR j:=1 TO Kol
  DO
   IF MatrixProcesses[i,j]=1
   THEN
     Sort(j, Rez);
     
  Index[pos]:=i;
  Processes[i,1]:=Rez; 
  DEC(pos);
END;

PROCEDURE Find(i:INTEGER; VAR tProc: INTEGER);                                                
VAR
  j: INTEGER;
BEGIN
  IF tProc<Processes[i,2] // максимальное время работы предпроцессов
  THEN
    tProc:=Processes[i,2];
    
  IF Processes[i,1]<>-1
  THEN
    EXIT;
  Processes[i,1]:=t; //начальное время всегда 0 (независимость процессов)

  FOR j:=1 TO Kol
  DO
    IF MatrixProcesses[i,j]=1
    THEN
      Find(j,tProc);
  tProc:=tProc+ Processes[i,0];
  Processes[i,2]:=tProc;

END;
  
BEGIN
  ASSIGN(Fin, 'Input.txt');
  RESET(Fin);
  ASSIGN(FOut, 'Output.txt');
  REWRITE(FOut);
  READLN(Fin,Kol);
  FOR i:=1 TO Kol
  DO
    BEGIN
      READ(Fin,Processes[i,0]);
      Processes[i,1]:=-1;
    END;   
  READLN(Fin);
  FOR i:=1 TO Kol
  DO
    BEGIN
      FOR j:=1 TO Kol
      DO  
      BEGIN
        READ(Fin,Ch);
        IF  Ch="Y" 
        THEN
          MatrixProcesses[i,j]:=1;
      END; 
      READLN(Fin); 
    END;        

  pos:=Kol;  // сортировка
  Rez:=2;
  FOR i:=1 TO Kol
  DO
    BEGIN
      Sort(i,Rez);
      IF Rez=1
      THEN
        BEGIN
          WRITELN(FOUT,-1);
          EXIT;
        END;
    END; 
     
  FOR i:=1 TO Kol // убираем действия сортировки
  DO
    Processes[i,1]:=-1;

  t:=0;
  tProc:=0;
  tProcMax:=0;
  FOR i:=Kol DOWNTO 1 // подсчет процессов
  DO
    BEGIN
      tProc:=0;
      Find(Index[i], tProc);
      IF  tProcMax<tProc
      THEN
        tProcMax:=tProc;
    END;  
  WRITELN(FOUT,tProc);
END.
