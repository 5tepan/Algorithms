{
1. 12.5. ????????? ????????? (5)

?? ??????? ?????????? ?????????? ????????? ? ??????? ??????????? ????? ????? ?????????? ????? ????????? ????? ?????????? ???????? ?????? ?????????.
2.Фомин Степан ПС-21
3. Dev+GNU Pascal 1.9.4.13
   Кодировка - 1251
4.INPUT - input.txt
  OUTPUT - output.txt
5.INPUT - ???? ?? ????? INPUT.TXT. ? ?????? ?????? ????????? ????? N (2 = N = 20) — ?????????? ?????????, ??????? ????? ?????????. ?? ?????? ?????? ????? ?????? ???????? N ????? ?? 1 ?? 1000; i-? ????? - ??? ????? ? ?????????????, ????????? ??? ?????????? i-?? ????????. ????? ???? N ?????, ??????????? ??????????? ????? ??????????. ? ?????? ?? ??? ????????? ?? N ???????? 'Y' ? 'N' (????????? ????????? ????). ?????? 'Y' ? i-? ?? ???? ????? ?? j-? ????? ????????, ??? ??? ??????? i-?? ???????? ????????? ????????? j-?. ?????? 'N' ????????, ??? i-? ??????? ?? ??????? ?? j-?? ????????.
  OUTPUT - ????? ? ???? OUTPUT.TXT.? ???????????? ?????? ??????? ??????????? ????? ? ?????????????, ????????? ??? ?????????? ???? ?????????, ??? –1, ???? ??? ???????? ??????? ???????????? ?????? ????????? ?????? ?????????.
}



PROGRAM Processes;
CONST 
  MaxKol=1000;
Type
  ArrayProc= array [0..MaxKol,0..2] of INTEGER;// время процесса, время предпроцессов, количество необработанных предпроцессов 
  MatrixProc= array [1..MaxKol,1..MaxKol] of INTEGER;//матрица смежности
Var
  Fin,Fout: Text;
  NameFile: STRING;
  Ch: CHAR;
  i, j, Kol, FlagEnd, tProcMax: INTEGER;
  Processes:ArrayProc;
  MatrixProcesses:MatrixProc;
PROCEDURE Print();                                                
VAR
  i,j: INTEGER;
BEGIN
  FOR i:=1 TO Kol
  DO
    BEGIN  
      WRITELN(FOUT);
      WRITE(FOUT,"Processes[i,0] ",Processes[i,0]," Processes[i,1] ",Processes[i,1]," Processes[i,2] ",Processes[i,2]);    
      FOR j:=1 TO Kol
      DO  
        WRITE(FOUT," ",MatrixProcesses[i,j]);
    END;    
  WRITELN(FOUT);       
END;
PROCEDURE Find(ii:INTEGER);                                                
VAR
  j,jj,FlagChange: INTEGER;
BEGIN
  FlagChange:=0;
  FOR j:=1 TO Kol
  DO
    BEGIN
      IF (MatrixProcesses[ii,j]=1) AND  (Processes[j,2]=0) //есть зависимость и предпроцесс обработан
      THEN
        BEGIN
          IF Processes[ii,1]< Processes[j,1]+Processes[j,0]
          THEN
            Processes[ii,1]:= Processes[j,1]+Processes[j,0];          
          // удаляем зависимость  в матрице смежности и кол-во необработанных предпроцессов  
          MatrixProcesses[ii,j]:=0;   
          Processes[ii,2]:=Processes[ii,2]-1;
        END;        
        FlagChange:=1;
        IF Processes[ii,2]=0 // окончена процесса обработка, смотрим есть  ли зависимые от этого процессы
        THEN
          FOR jj:=1 TO Kol
          DO
           IF MatrixProcesses[jj,j]=1  //есть зависимость и предпроцесс обработан - пробуем обработать зависимые
           THEN
             Find(jj);
    END;
END;
  
BEGIN
  ASSIGN(Fin, 'Input.txt');
  RESET(Fin);
  ASSIGN(FOut, 'Output.txt');
  REWRITE(FOut);
  READLN(Fin,Kol);
  FOR i:=1 TO Kol
  DO
      READ(Fin,Processes[i,0]);
  READLN(Fin);
  FOR i:=1 TO Kol
  DO
    BEGIN
      FOR j:=1 TO Kol
      DO  
      BEGIN
        READ(Fin,Ch);
        IF  Ch="Y" 
        THEN
          BEGIN
            MatrixProcesses[i,j]:=1;
            Processes[i,2]:=Processes[i,2]+1;
          END;  
      END; 
      READLN(Fin); 
    END;         
  FOR i:=1 TO Kol
  DO
    Find(i);
  tProcMax:=-1;
  FOR i:=1 TO Kol 
   DO
     IF (Processes[i,2]=0) AND (tProcMax< Processes[i,1]+Processes[i,0])
     THEN
       tProcMax:=Processes[i,1]+Processes[i,0];
  WRITELN(FOUT,tProcMax);
END.
